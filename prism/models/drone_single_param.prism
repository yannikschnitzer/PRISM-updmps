mdp

// Environment Dimensions
const int MAXX = 8;
const int MAXY = 8;
const int MAXZ = 8;

// Disturbance Probability Parameter
const double p; // must be less than 1/3

// Regions

// Target Region
formula target = x > MAXX - 2 & y < 2 & z > MAXZ - 2;

// Obstacle Regions
formula crash = obstacle1 | obstacle2 | obstacle3 | obstacle4;
formula obstacle1 = x >= 3 & x <= 4 & z >= 1 & z <= 2;
formula obstacle2 = x >= 3 & x <= 4 & y >= 1 & y <= 2;
formula obstacle3 = x >= 3 & x <= 4 & y >= 3 & y <= 5;
formula obstacle4 = x >= 3 & x <= 4 & z >= 7 & z <= 8;

module drone
	x : [1..MAXX] init 1;
	y : [1..MAXY] init 1;
	z : [1..MAXZ] init 1;

	[front] x < MAXX -> 1 - 3 * p: (x' = x + 1) 
				+ p : (x' = x + 1) & (y' = max(y - 1,1))
				+ p : (x' = x + 1) & (y' = min(y + 1, MAXY))
				+ p : (x' = x) & (y' = max(y - 2, 1));

	[back] x > 1 -> 1 - 3 * p: (x' = x - 1) 
				+ p : (x' = x - 1) & (y' = max(y - 1,1))
				+ p : (x' = x - 1) & (y' = min(y + 1, MAXY))
				+ p : (x' = x) & (y' = max(y - 2, 1));

	[right] y < MAXY -> 1 - 2 * p: (y' = y + 1) 
				+ p: (y' = min(y + 2, MAXY))
				+ p: (y' = max(y - 1, 1));

	[left] y > 1 -> 1 - 2 * p: (y' = y - 1) 
				+ p: (y' = max(y - 2, 1))
				+ p: (y' = min(y + 1, MAXY));

	[up] z < MAXZ  -> 1 - 3 * p: (z' = z + 1) 
				+ p : (z' = z + 1) & (y' = max(y - 1,1))
				+ p : (z' = z + 1) & (y' = min(y + 1, MAXY))
				+ p : (z' = z) & (y' = max(y - 2, 1));

	[down] z > 1 -> 1 - 3 * p: (z' = z - 1) 
				+ p : (z' = z - 1) & (y' = max(y - 1,1))
				+ p : (z' = z - 1) & (y' = min(y + 1, MAXY))
				+ p : (z' = z) & (y' = max(y - 2, 1));

endmodule 











